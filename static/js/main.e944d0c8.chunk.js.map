{"version":3,"sources":["components/StyledDropzone.tsx","helpers/util.ts","components/App.tsx","index.tsx"],"names":["acceptStyle","css","FileInput","styled","div","isDragAccept","StyledDropzone","onDrop","useDropzone","getRootProps","getInputProps","isFocused","isDragReject","getNameAndJpg","file","mimeHeaders","jpeg","Promise","resolve","size","snapmaticOffset","reader","FileReader","onload","e","target","result","slicedResult","slice","byteLength","imageArray","Uint8Array","header","Array","from","subarray","map","i","toString","join","includes","name","src","window","URL","createObjectURL","Blob","type","readAsArrayBuffer","Button","button","Img","img","Ul","ul","Li","li","DropzoneContainer","App","useState","images","setImages","handleFileSelect","files","a","length","error","newImages","image","push","alert","concat","className","style","textAlign","title","onClick","index","key","href","download","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAUMA,EAAcC,YAAH,gEAFE,qBAObC,EAAYC,IAAOC,IAAV,0MAYX,qBAAGC,cAAmDL,KA0B3CM,EAjBQ,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,OACxB,EAMIC,YAAY,CAAED,WALhBE,EADF,EACEA,aACAC,EAFF,EAEEA,cACAC,EAHF,EAGEA,UACAN,EAJF,EAIEA,aACAO,EALF,EAKEA,aAGF,OACE,kBAACV,EAAcO,EAAa,CAAEE,YAAWN,eAAcO,iBACrD,0BAAWF,KADb,kDCzCSG,EAAgB,SAACC,GAC5B,IAEMC,EAAc,CAClBC,KAAM,CAAC,WAAY,WAAY,WAAY,WAAY,aAEzD,OAAO,IAAIC,SAAQ,SAAAC,GACjB,GAAIJ,EAAKK,KAAOC,IACdF,EAAQ,UADV,CAIA,IAAMG,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAAAC,GACd,GAAiB,OAAbA,EAAEC,OAAN,CAIA,IAAMC,EAAUF,EAAEC,OAAsBC,OAClCC,EAAeD,EAAOE,MAjBR,IAiB+BF,EAAOG,YACpDC,EAAa,IAAIC,WAAWJ,GAC5BK,EAAiBC,MAAMC,KAAKJ,EAAWK,SAAS,EAlBrC,IAmBdC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,SAAS,OACpBC,KAAK,IACJP,GAAUjB,EAAYC,KAAKwB,SAASR,GACtCd,EAAQ,CACNuB,KAAM3B,EAAK2B,KAAO,OAClBC,IAAKC,OAAOC,IAAIC,gBACd,IAAIC,KAAK,CAAChB,GAAa,CAAEiB,KAAM,kBAInC7B,EAAQ,WAjBRA,EAAQ,OAoBZG,EAAO2B,kBAAkBlC,Q,u0BClC7B,IAAMmC,EAAS9C,IAAO+C,OAAV,oLAUNC,EAAMhD,IAAOiD,IAAV,4CAIHC,EAAKlD,IAAOmD,GAAV,2KAWFC,EAAKpD,IAAOqD,GAAV,iDAIFC,EAAoBtD,IAAOC,IAAV,iKA8ERsD,EArEH,WACV,MAA4BC,mBAAkB,IAA9C,mBAAOC,EAAP,KAAeC,EAAf,KAEMC,EAAgB,uCAAG,WAAOC,GAAP,+BAAAC,EAAA,yDACF,IAAjBD,EAAME,OADa,iDAKnBC,GAAQ,EACNC,EAAqB,GANJ,uBAOEJ,GAPF,0FAONjD,EAPM,kBAQHD,EAAcC,GARX,SAQjBsD,EARiB,QAUnBD,EAAUE,KAAKD,GAEfF,GAAQ,EAZW,kTAgBnBA,GACFI,MACE,+EAIJT,GAAU,SAAAD,GAAM,OAAIA,EAAOW,OAAOJ,MAtBX,4EAAH,sDA6BtB,OACE,yBAAKK,UAAU,YAAYC,MAAO,CAAEC,UAAW,WAC7C,uEACA,uGAGA,2BACE,oCADF,gGAIA,kBAACjB,EAAD,KACE,kBAAC,EAAD,CAAgBlD,OAAQuD,KAEzBF,EAAOK,OAAS,GACf,oCACE,6DACkC,IAChC,kBAAChB,EAAD,CAAQ0B,MAAM,mBAAmBC,QArB1B,WACff,EAAU,MAoBF,cAIF,kBAACR,EAAD,KACGO,EAAOxB,KAAI,SAACgC,EAAOS,GAAR,OACV,kBAACtB,EAAD,CAAIuB,IAAKD,GACP,uBAAGE,KAAMX,EAAM1B,IAAKsC,SAAUZ,EAAM3B,MAClC,kBAACU,EAAD,CAAKT,IAAK0B,EAAM1B,IAAKiC,MAAOP,EAAM3B,QAEpC,8BAAO2B,EAAM3B,cCjG7BwC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.e944d0c8.chunk.js","sourcesContent":["import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { useDropzone } from 'react-dropzone';\n\ninterface FileInputProps {\n  isDragAccept: boolean;\n}\n\nconst lightGreen = '#8bff8b';\n\nconst acceptStyle = css`\n  border-color: ${lightGreen};\n  color: ${lightGreen};\n`;\n\nconst FileInput = styled.div`\n  cursor: pointer;\n  border: dashed white 2px;\n  border-radius: 8px;\n  padding: 16px;\n  user-select: none;\n\n  &:focus,\n  &:active {\n    outline: none;\n  }\n\n  ${({ isDragAccept }: FileInputProps) => isDragAccept && acceptStyle}\n`;\n\nexport interface Props {\n  onDrop: {\n    (files: File[]): void;\n  };\n}\n\nconst StyledDropzone = ({ onDrop }: Props) => {\n  const {\n    getRootProps,\n    getInputProps,\n    isFocused,\n    isDragAccept,\n    isDragReject,\n  } = useDropzone({ onDrop });\n\n  return (\n    <FileInput {...getRootProps({ isFocused, isDragAccept, isDragReject })}>\n      <input {...getInputProps()} />\n      Click here to select files, or drag and drop.\n    </FileInput>\n  );\n};\n\nexport default StyledDropzone;\n","export interface Image {\n  name: string;\n  src: string;\n}\n\nexport const getNameAndJpg = (file: File): Promise<Image | null> => {\n  const snapmaticOffset = 292;\n  const headerLength = 4;\n  const mimeHeaders = {\n    jpeg: ['ffd8ffe0', 'ffd8ffe1', 'ffd8ffe2', 'ffd8ffe3', 'ffd8ffe8'],\n  };\n  return new Promise(resolve => {\n    if (file.size < snapmaticOffset + headerLength) {\n      resolve(null);\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = e => {\n      if (e.target === null) {\n        resolve(null);\n        return;\n      }\n      const result = (e.target as FileReader).result as ArrayBuffer;\n      const slicedResult = result.slice(snapmaticOffset, result.byteLength);\n      const imageArray = new Uint8Array(slicedResult);\n      const header: string = Array.from(imageArray.subarray(0, headerLength))\n        .map(i => i.toString(16))\n        .join('');\n      if (header && mimeHeaders.jpeg.includes(header)) {\n        resolve({\n          name: file.name + '.jpg',\n          src: window.URL.createObjectURL(\n            new Blob([imageArray], { type: 'image/jpeg' }),\n          ),\n        });\n      } else {\n        resolve(null);\n      }\n    };\n    reader.readAsArrayBuffer(file);\n  });\n};\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport StyledDropzone from './StyledDropzone';\nimport { getNameAndJpg, Image } from '../helpers/util';\n\nconst Button = styled.button`\n  cursor: pointer;\n  background-color: #1c1f24;\n  padding: 12px 16px;\n  user-select: none;\n  border: none;\n  border-radius: 8px;\n  color: white;\n`;\n\nconst Img = styled.img`\n  width: 100%;\n`;\n\nconst Ul = styled.ul`\n  padding: 0;\n  margin: 16px auto 0;\n  list-style: none;\n  max-width: 50vw;\n\n  @media (max-width: 767.98px) {\n    max-width: 100%;\n  }\n`;\n\nconst Li = styled.li`\n  margin-top: 16px;\n`;\n\nconst DropzoneContainer = styled.div`\n  margin-top: 16px;\n  max-width: 400px;\n  display: flex;\n  justify-content: center;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst App = () => {\n  const [images, setImages] = useState<Image[]>([]);\n\n  const handleFileSelect = async (files: File[]) => {\n    if (files.length === 0) {\n      return;\n    }\n\n    let error = false;\n    const newImages: Image[] = [];\n    for await (const file of files) {\n      let image = await getNameAndJpg(file);\n      if (image) {\n        newImages.push(image);\n      } else {\n        error = true;\n      }\n    }\n\n    if (error) {\n      alert(\n        'Some images could not be converted, as they were not valid Snapmatic images',\n      );\n    }\n\n    setImages(images => images.concat(newImages));\n  };\n\n  const clearAll = () => {\n    setImages([]);\n  };\n\n  return (\n    <div className=\"container\" style={{ textAlign: 'center' }}>\n      <h1>GTA V Snapmatic to JPEG / JPG converter</h1>\n      <p>\n        A simple tool to convert your GTA V Snapmatic snaps to JPEG / JPG files.\n      </p>\n      <p>\n        <b>Note:</b> This only works locally. All conversion takes place in your\n        browser. No files are uploaded.\n      </p>\n      <DropzoneContainer>\n        <StyledDropzone onDrop={handleFileSelect} />\n      </DropzoneContainer>\n      {images.length > 0 && (\n        <>\n          <p>\n            Click any image to download it.{' '}\n            <Button title=\"Clear all images\" onClick={clearAll}>\n              Clear all\n            </Button>\n          </p>\n          <Ul>\n            {images.map((image, index) => (\n              <Li key={index}>\n                <a href={image.src} download={image.name}>\n                  <Img src={image.src} title={image.name} />\n                </a>\n                <span>{image.name}</span>\n              </Li>\n            ))}\n          </Ul>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}