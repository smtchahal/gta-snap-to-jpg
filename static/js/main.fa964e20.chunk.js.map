{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["DropzoneContainer","styled","div","Button","button","FileInput","Img","img","Ul","ul","Li","li","getNameAndJpg","file","mimeHeaders","jpeg","Promise","resolve","length","reader","FileReader","onload","e","result","target","slicedResult","slice","size","imageArray","Uint8Array","header","Array","from","subarray","map","i","toString","join","includes","name","src","window","URL","createObjectURL","Blob","readAsArrayBuffer","App","state","images","handleFileSelect","files","a","error","image","push","alert","setState","clearAll","render","className","style","textAlign","onDrop","getRootProps","getInputProps","title","onClick","index","key","href","download","React","PureComponent","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"k0CAIA,IAAMA,EAAoBC,IAAOC,IAAV,KASjBC,EAASF,IAAOG,OAAV,KAUNC,EAAYJ,IAAOC,IAAV,KAYTI,EAAML,IAAOM,IAAV,KAIHC,EAAKP,IAAOQ,GAAV,KAWFC,EAAKT,IAAOU,GAAV,KAIFC,EAAgB,SAAAC,GACpB,IAAMC,EAAc,CAClBC,KAAM,CAAC,WAAY,WAAY,WAAY,WAAY,aAEzD,OAAO,IAAIC,SAAQ,SAAAC,GACjB,GAAIJ,EAAKK,OAAS,IAChBD,EAAQ,UADV,CAIA,IAAME,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAAAC,GACd,IAAMC,EAASD,EAAEE,OAAOD,OAClBE,EAAeF,EAAOG,MAAM,IAAKH,EAAOI,MACxCC,EAAa,IAAIC,WAAWJ,GAC5BK,EAASC,MAAMC,KAAKJ,EAAWK,SAAS,EAAG,IAC9CC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,SAAS,OACpBC,KAAK,IACJP,GAAUhB,EAAYC,KAAKuB,SAASR,GACtCb,EAAQ,CACNsB,KAAM1B,EAAK0B,KAAO,OAClBC,IAAKC,OAAOC,IAAIC,gBAAgB,IAAIC,KAAK,CAAChB,OAG5CX,EAAQ,OAGZE,EAAO0B,kBAAkBhC,QA+EdiC,E,4MA1EbC,MAAQ,CAAEC,OAAQ,I,EAElBC,iB,uCAAmB,WAAMC,GAAN,iCAAAC,EAAA,yDACI,IAAjBD,EAAMhC,OADO,iDAKbkC,GAAQ,EACNJ,EANW,YAME,EAAKD,MAAMC,QANb,iCAOQE,GAPR,kIAOArC,EAPA,YAQKD,EAAcC,GARnB,SAQTwC,EARS,QAUbL,EAAOM,KAAKD,GAEZD,GAAQ,EAZK,iTAgBbA,GACFG,MACE,+EAKJ,EAAKC,SAAS,CAAER,OAAQA,IAvBP,4E,wDA0BnBS,SAAW,WACT,EAAKD,SAAS,CAAER,OAAQ,M,EAG1BU,OAAS,kBACP,yBAAKC,UAAU,YAAYC,MAAO,CAAEC,UAAW,WAC7C,uEACA,uGACA,2BACE,oCADF,gGAIA,kBAAC7D,EAAD,KACE,kBAAC,IAAD,CAAU8D,OAAQ,EAAKb,mBACpB,gBAAGc,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,cAAjB,OACC,kBAAC3D,EAAc0D,IACb,0BAAWC,KADb,qDAOL,EAAKjB,MAAMC,OAAO9B,OAAS,GAC1B,oCACE,6DACkC,IAChC,kBAACf,EAAD,CAAQ8D,MAAM,mBAAmBC,QAAS,EAAKT,UAA/C,cAIF,kBAACjD,EAAD,KACG,EAAKuC,MAAMC,OAAOd,KAAI,SAACmB,EAAOc,GAAR,OACrB,kBAACzD,EAAD,CAAI0D,IAAKD,GACP,uBAAGE,KAAMhB,EAAMb,IAAK8B,SAAUjB,EAAMd,MAClC,kBAACjC,EAAD,CAAKkC,IAAKa,EAAMb,IAAKyB,MAAOZ,EAAMd,QAEpC,8BAAOc,EAAMd,c,YAjEXgC,IAAMC,eCxEJC,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MACvB,2DCZNC,IAASnB,OACP,kBAAC,IAAMoB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,c","file":"static/js/main.fa964e20.chunk.js","sourcesContent":["import React from 'react';\nimport Dropzone from 'react-dropzone';\nimport styled from 'styled-components';\n\nconst DropzoneContainer = styled.div`\n  margin-top: 16px;\n  max-width: 400px;\n  display: flex;\n  justify-content: center;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst Button = styled.button`\n  cursor: pointer;\n  background-color: #1c1f24;\n  padding: 12px 16px;\n  user-select: none;\n  border: none;\n  border-radius: 8px;\n  color: white;\n`;\n\nconst FileInput = styled.div`\n  cursor: pointer;\n  border: dashed white 2px;\n  border-radius: 8px;\n  padding: 16px;\n\n  &:focus,\n  &:active {\n    outline: none;\n  }\n`;\n\nconst Img = styled.img`\n  width: 100%;\n`;\n\nconst Ul = styled.ul`\n  padding: 0;\n  margin: 16px auto 0;\n  list-style: none;\n  max-width: 50vw;\n\n  @media (max-width: 767px) {\n    max-width: 100%;\n  }\n`;\n\nconst Li = styled.li`\n  margin-top: 16px;\n`;\n\nconst getNameAndJpg = file => {\n  const mimeHeaders = {\n    jpeg: ['ffd8ffe0', 'ffd8ffe1', 'ffd8ffe2', 'ffd8ffe3', 'ffd8ffe8'],\n  };\n  return new Promise(resolve => {\n    if (file.length < 292 + 4) {\n      resolve(null);\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = e => {\n      const result = e.target.result;\n      const slicedResult = result.slice(292, result.size);\n      const imageArray = new Uint8Array(slicedResult);\n      const header = Array.from(imageArray.subarray(0, 4))\n        .map(i => i.toString(16))\n        .join('');\n      if (header && mimeHeaders.jpeg.includes(header)) {\n        resolve({\n          name: file.name + '.jpg',\n          src: window.URL.createObjectURL(new Blob([imageArray])),\n        });\n      } else {\n        resolve(null);\n      }\n    };\n    reader.readAsArrayBuffer(file);\n  });\n};\n\nclass App extends React.PureComponent {\n  state = { images: [] };\n\n  handleFileSelect = async files => {\n    if (files.length === 0) {\n      return;\n    }\n\n    let error = false;\n    const images = [...this.state.images];\n    for await (const file of files) {\n      const image = await getNameAndJpg(file);\n      if (image) {\n        images.push(image);\n      } else {\n        error = true;\n      }\n    }\n\n    if (error) {\n      alert(\n        'Some images could not be converted, as they were not valid ' +\n          'Snapmatic images',\n      );\n    }\n\n    this.setState({ images: images });\n  };\n\n  clearAll = () => {\n    this.setState({ images: [] });\n  };\n\n  render = () => (\n    <div className=\"container\" style={{ textAlign: 'center' }}>\n      <h1>GTA V Snapmatic to JPEG / JPG converter</h1>\n      <p>A simple tool to convert your GTA V Snapmatic snaps to JPEG / JPG files.</p>\n      <p>\n        <b>Note:</b> This only works locally. All conversion takes place in your\n        browser. No files are uploaded.\n      </p>\n      <DropzoneContainer>\n        <Dropzone onDrop={this.handleFileSelect}>\n          {({ getRootProps, getInputProps }) => (\n            <FileInput {...getRootProps()}>\n              <input {...getInputProps()} />\n              Click here to select files, or drag and drop.\n            </FileInput>\n          )}\n        </Dropzone>\n      </DropzoneContainer>\n      {this.state.images.length > 0 && (\n        <>\n          <p>\n            Click any image to download it.{' '}\n            <Button title=\"Clear all images\" onClick={this.clearAll}>\n              Clear all\n            </Button>\n          </p>\n          <Ul>\n            {this.state.images.map((image, index) => (\n              <Li key={index}>\n                <a href={image.src} download={image.name}>\n                  <Img src={image.src} title={image.name} />\n                </a>\n                <span>{image.name}</span>\n              </Li>\n            ))}\n          </Ul>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}